*claudecode.txt*  Claude Code integration for Vim/Neovim

Author: gamoutatsumi
License: Same terms as Vim itself (see |license|)

CONTENTS                                                    *claudecode-contents*

Introduction .......................... |claudecode-introduction|
Requirements .......................... |claudecode-requirements|
Commands .............................. |claudecode-commands|
Configuration ......................... |claudecode-configuration|
Key Mappings .......................... |claudecode-mappings|
Usage ................................. |claudecode-usage|

==============================================================================
INTRODUCTION                                            *claudecode-introduction*

This plugin integrates Claude Code with Vim/Neovim through denops.vim,
allowing you to interact with Claude Code directly from your editor.

Features:
- Interactive chat sessions with Claude Code
- Multiple concurrent sessions
- Model switching (opus, sonnet, etc.)
- File editing capabilities through Claude Code tools
- Prompt buffer interface for easy interaction

==============================================================================
REQUIREMENTS                                            *claudecode-requirements*

- Vim 8.1+ or Neovim 0.4+
- denops.vim (https://github.com/vim-denops/denops.vim)
- Deno runtime
- Claude Code CLI installed and authenticated

Installation of Claude Code CLI:
>
  npm install -g @anthropic-ai/claude-code
  claude login
<

==============================================================================
COMMANDS                                                    *claudecode-commands*

                                                            *:ClaudeCodeStart*
:ClaudeCodeStart [{model}]
    Start a new Claude Code session. Optional {model} parameter can be
    'opus', 'sonnet', etc. Defaults to g:claudecode_default_model.

                                                            *:ClaudeCodeEnd*
:ClaudeCodeEnd
    End the current Claude Code session.

                                                            *:ClaudeCodeSend*
:ClaudeCodeSend {message}
    Send a message to the current Claude Code session.

                                                            *:ClaudeCode*
:ClaudeCode {message}
    Quick command to start a session (if needed) and send a message.

                                                            *:ClaudeCodeList*
:ClaudeCodeList
    List all active Claude Code sessions.

                                                            *:ClaudeCodeSwitch*
:ClaudeCodeSwitch {session-id}
    Switch to a different Claude Code session.

                                                            *:ClaudeCodeModel*
:ClaudeCodeModel {model}
    Switch the model for the current session.

==============================================================================
CONFIGURATION                                        *claudecode-configuration*

                                                    *g:claudecode_default_model*
g:claudecode_default_model
    Default model to use when starting a session.
    Default: 'sonnet'

                                                    *g:claudecode_auto_scroll*
g:claudecode_auto_scroll
    Automatically scroll to the bottom of the chat buffer.
    Default: 1

                                                    *g:claudecode_no_mappings*
g:claudecode_no_mappings
    Disable default key mappings if set to 1.
    Default: undefined (mappings enabled)

==============================================================================
KEY MAPPINGS                                            *claudecode-mappings*

Default mappings (can be disabled with |g:claudecode_no_mappings|):

<Leader>cc                  Start a new Claude Code session
<Leader>ce                  End the current session
<Leader>cl                  List all sessions
<Leader>cs                  Send selected text to Claude (visual mode)

==============================================================================
USAGE                                                        *claudecode-usage*

Basic workflow:
1. Start a session with :ClaudeCodeStart
2. Type your message in the prompt buffer and press Enter
3. Claude will respond in the same buffer
4. Continue the conversation as needed
5. End the session with :ClaudeCodeEnd or press 'q' in the buffer

Example:
>
  :ClaudeCodeStart opus
  > Help me refactor this function
  > Make it more efficient
  :ClaudeCodeEnd
<

The plugin will handle file edits automatically when Claude uses its tools.
You can review changes in your regular buffers.

vim:tw=78:ts=8:ft=help:norl: